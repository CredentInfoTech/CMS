/* eslint-disable @typescript-eslint/no-floating-promises */
/* eslint-disable @rushstack/no-new-null */
/* eslint-disable  @typescript-eslint/no-unused-vars */
/* eslint-disable max-lines */
/* eslint-disable prefer-const */
/* eslint-disable no-empty */
/* eslint-disable eqeqeq */
/* eslint-disable no-void */
/* eslint-disable @typescript-eslint/explicit-function-return-type */
/* eslint-disable @typescript-eslint/no-explicit-any */
/* eslint-disable no-sequences */
// /* eslint-disable eqeqeq */

import * as React from "react";
import { useState, useEffect } from "react";
import { Collapse } from "react-bootstrap";
import {
  getDocumentLibraryData,
  getSharePointData,
  updateDataToSharePoint,
  addFileInSharepoint,
  // handleViewFile,
  handleDownload,
  deleteAttachmentFile,
} from "../services/SharePointService";
import { DatePicker } from "antd";
import { Modal, Button } from "react-bootstrap";
import Spinner from "react-bootstrap/Spinner";
import * as moment from "moment";
import { faClockRotateLeft } from "@fortawesome/free-solid-svg-icons";

import { FontAwesomeIcon } from "@fortawesome/react-fontawesome";
import {
  // faEye,
  faPlus,
  faTrash,
  faFileArrowDown,
  faUpload,
  faAngleUp,
  faAngleDown,
} from "@fortawesome/free-solid-svg-icons";

interface PopupRow {
  id: number;
  type: string;
  invoiceValue: string;
  azureFileId?: string;
  azureFileName?: string;
  azureFileUrl?: string;
}

interface ChargeRow {
  id: number;
  percentage: any;
  value: number;
  totalChargesvalue: number;
  addOnValue?: number | null;
  additionalChargesRequired?: string;
  additionalType: string;
  chargesType: string;
}

interface AzureRow {
  id: number;
  itemID: number | null;
  description: string;
  ProceedDate: string;
  totalInvoiceAmount: string;
  dueDate: string;
  invoiceStatus: string;
  isOpen: boolean;
  InvoiceFileID: string;
  popupRows: PopupRow[];
  chargeRows: ChargeRow[];
  isAutoGenerated?: boolean; // <-- Add this line
}

interface AzureSectionProps {
  siteUrl: string;
  context: any;
  onDataChange: (rows: any[]) => void;
  productServiceType?: string;
  customerDetails: any[];
  userGroups: string[]; // Add this line
  selectedCustomerName: string;
  approverStatus: string;
  rowEdit?: string;
  selectedRow?: any;
  setInvoiceRows?: any;
  currentUserEmail: string;
  isCollapsed: boolean;
  setIsCollapsed: React.Dispatch<React.SetStateAction<boolean>>;
}

export default function AzureSection(
  props: AzureSectionProps & {
    onDataChange: (rows: any[]) => void;
    productServiceType?: string;
    onProceedButtonCountChange?: (count: number) => void; // Add this line
  }
) {
  const {
    siteUrl,
    context,
    onDataChange,
    userGroups,
    // productServiceType,
    customerDetails,
    selectedCustomerName,
    approverStatus,
    rowEdit,
    selectedRow,
    setInvoiceRows,
    currentUserEmail,
    onProceedButtonCountChange,
  } = props;
  const CMSAzureDocuments = "CMSAzureDocuments";
  const invoiceDocument = "InvoiceDocument";
  console.log(siteUrl, "siteUrlinvoice123");
  console.log(props, "propsinvoice123");

  // const utcDate = (date: string) => {
  //   date.toLocaleDateString("en-IN", {
  //     day: "2-digit",
  //     month: "2-digit",
  //     year: "numeric",
  //   });
  // };
  // Place these inside the function body, after other useState hooks
  const { isCollapsed, setIsCollapsed } = props;
  const [invoiceDocuments, setInvoiceDocuments] = useState<any[]>([]);
  // const [isdisabled, setIsDisabled] = useState(false);
  const [isLoading, setIsLoading] = useState(false);

  const [rowsWithHistory, setRowsWithHistory] = useState<
    Record<number, boolean>
  >({});
  const getInvoiceTotal = (popupRows: PopupRow[]) => {
    return popupRows
      .reduce((total, row) => {
        const val = parseFloat(row.invoiceValue);
        return total + (isNaN(val) ? 0 : val);
      }, 0)
      .toFixed(2);
  };
  const checkRowHistory = async (row: any) => {
    const InvoiceHistory = "CMSPaymentHistory";
    const filterQuery = `$select=Id&$filter=CMSRequestItemID eq '${row.itemID}'&$top=1`;
    try {
      const response = await getSharePointData(
        { context },
        InvoiceHistory,
        filterQuery
      );
      setRowsWithHistory((prev) => ({
        ...prev,
        [row.id]: response && response.length > 0,
      }));
    } catch {
      setRowsWithHistory((prev) => ({ ...prev, [row.id]: false }));
    }
  };

  // function getViewUrl(file: any) {
  //   const fileName = file.FileLeafRef || "";
  //   const ext = fileName.split(".").pop()?.toLowerCase() || "";
  //   if (ext === "txt") {
  //     return file.EncodedAbsUrl;
  //   }
  //   if (ext === "png" || ext === "jpg" || ext === "csv") {
  //     return file.EncodedAbsUrl + "?web=1";
  //   }
  //   return file.ServerRedirectedEmbedUri;
  // }

  // const handleViewInvoiceFile = (
  //   e: React.MouseEvent<HTMLButtonElement>,
  //   encodedUrl: string,
  //   props: { context: any }
  // ): void => {
  //   try {
  //     e.preventDefault();
  //     const viewUrl = `${encodedUrl}`;
  //     window.open(viewUrl, "_blank");
  //   } catch (error) {
  //     console.error("Error in handleViewFile:", error);
  //     alert("An error occurred while opening the file.");
  //   }
  // };

  const [additionalChargesChecked, setAdditionalChargesChecked] = useState<
    Record<string, boolean>
  >({});
  const [rows, setRows] = useState<AzureRow[]>(() => {
    const currentDate = new Date();
    const firstDueDate = new Date(
      currentDate.getFullYear(),
      currentDate.getMonth() + (currentDate.getDate() > 3 ? 1 : 0),
      3
    );

    // Try to get selected customer for default percentages
    let customer: any = null;
    if (customerDetails && selectedCustomerName) {
      customer = customerDetails.find(
        (c: any) => c.Title === selectedCustomerName
      );
    }
    console.log(customer, "customer");
    // Create 6 rows with unique ids and due dates
    return Array.from({ length: 1 }, (_, i) => {
      const dueDate = new Date(firstDueDate);
      dueDate.setMonth(dueDate.getMonth() + i); // Increment month for each row
      // Set default percentages/values for Discount and Support
      let discountPercentage;
      let discountValue;
      let supportPercentage;
      let supportValue;
      if (customer) {
        if (customer.DiscountTypeRequired === "Percentage") {
          discountPercentage = customer.Discount;
        } else {
          discountValue = customer.Discount;

          // discountValue = customer.Discount;
        }
        if (customer.SupportTypeRequired === "Percentage") {
          supportPercentage = customer.Support;
        } else {
          supportValue = customer.Support;
        }
      }
      console.log(customer);
      // Initial chargeRows, totalChargesvalue will be calculated in useEffect
      const popupRowsInit = [
        {
          id: 1,
          type: "",
          invoiceValue: "",
          azureFileId: undefined,
          azureFileName: undefined,
          azureFileUrl: undefined,
        },
      ];
      return {
        id: i + 1,
        itemID: null,
        description: "",
        // ProceedDate: new Date().toISOString().split("T")[0],
        ProceedDate: new Date().toLocaleDateString("en-CA"),
        totalInvoiceAmount: "", // <-- Add this line
        dueDate: dueDate.toLocaleDateString("en-CA"),
        invoiceStatus: "",
        isOpen: false,
        InvoiceFileID: "",
        isAutoGenerated: false,
        popupRows: popupRowsInit as PopupRow[],
        chargeRows: [
          {
            id: 1,
            chargesType: "Discount",
            percentage: discountPercentage ? discountPercentage : 0,
            value: discountValue ? discountValue : 0,
            totalChargesvalue: 0,
            addOnValue: undefined,
            additionalChargesRequired: "",
            additionalType: "",
          },
          {
            id: 2,
            chargesType: "Support",
            percentage: supportPercentage ? supportPercentage : 0,
            value: supportValue ? supportValue : 0,
            totalChargesvalue: 0,
            addOnValue: undefined,
            additionalChargesRequired: "",
            additionalType: "",
          },
        ] as ChargeRow[],
      };
    });
  });
  const handleAdditionalChargesCheckbox = (
    rowId: number,
    chargeRowId: number,
    checked: boolean
  ): void => {
    setAdditionalChargesChecked((prev: Record<string, boolean>) => ({
      ...prev,
      [`${rowId}_${chargeRowId}`]: checked,
    }));
    setRows((prevRows) =>
      prevRows.map((row) =>
        row.id === rowId
          ? {
              ...row,
              chargeRows: row.chargeRows.map((chargeRow) => {
                if (chargeRow.id === chargeRowId) {
                  let newTotalCharges = chargeRow.totalChargesvalue;
                  if (!checked) {
                    const invoiceTotal = parseFloat(
                      getInvoiceTotal(row.popupRows)
                    );
                    if (chargeRow.percentage) {
                      newTotalCharges =
                        (Number(chargeRow.percentage) * invoiceTotal) / 100;
                    } else if (chargeRow.value) {
                      newTotalCharges = Number(chargeRow.value);
                    } else {
                      newTotalCharges = 0;
                    }
                  }
                  return {
                    ...chargeRow,
                    additionalChargesRequired: checked ? "Yes" : "No",
                    addOnValue: checked ? chargeRow.addOnValue : null,
                    additionalType: checked ? chargeRow.additionalType : "",
                    totalChargesvalue: checked
                      ? chargeRow.totalChargesvalue
                      : newTotalCharges,
                  };
                }
                return chargeRow;
              }),
            }
          : row
      )
    );
  };

  //   const handleAdditionalChargesCheckbox = (rowId: number, chargeRowId: number, checked: boolean): void => {
  //   setAdditionalChargesChecked((prev: Record<string, boolean>) => ({ ...prev, [`${rowId}_${chargeRowId}`]: checked }));
  //   setRows(prevRows =>
  //     prevRows.map(row =>
  //       row.id === rowId
  //         ? {
  //             ...row,
  //             chargeRows: row.chargeRows.map(chargeRow =>
  //               chargeRow.id === chargeRowId
  //                 ? {
  //                     ...chargeRow,
  //                     additionalChargesRequired: checked ? "Yes" : "No",
  //                     addOnValue: checked ? chargeRow.addOnValue : null,
  //                     additionalType: checked ? chargeRow.additionalType : "",
  //                   }
  //                 : chargeRow
  //             ),
  //           }
  //         : row
  //     )
  //   );
  // };

  const azureList = "CMSAzureList";
  const chargesList = "CMSAzureChargesList";

  const createNewAzureRow = (prevDueDate: Date | null, id: number) => {
    // 1. Calculate the new due date
    let newDueDate: Date;
    if (prevDueDate) {
      const nextMonth = new Date(prevDueDate);
      nextMonth.setMonth(prevDueDate.getMonth() + 1);
      newDueDate = new Date(nextMonth.getFullYear(), nextMonth.getMonth(), 3);
    } else {
      const today = new Date();
      today.setMonth(today.getMonth() + 1);
      newDueDate = new Date(today.getFullYear(), today.getMonth(), 3);
    }

    // 2. Lookup customer-based discount and support
    let discountPercentage, discountValue, supportPercentage, supportValue;
    let customer = customerDetails?.find(
      (c: any) => c.Title === selectedCustomerName
    );
    if (customer) {
      if (customer.DiscountTypeRequired === "Percentage") {
        discountPercentage = customer.Discount;
      } else {
        discountValue = customer.Discount;
      }
      if (customer.SupportTypeRequired === "Percentage") {
        supportPercentage = customer.Support;
      } else {
        supportValue = customer.Support;
      }
    }

    // 3. Return row
    return {
      id,
      itemID: null,
      description: "",
      ProceedDate: new Date().toLocaleDateString("en-CA"),
      totalInvoiceAmount: "",
      dueDate: newDueDate.toLocaleDateString("en-CA"),
      invoiceStatus: "",
      InvoiceFileID: "",
      isOpen: false,
      isAutoGenerated: true,
      popupRows: [
        {
          id: 1,
          type: "",
          invoiceValue: "",
          azureFileId: undefined,
          azureFileName: undefined,
          azureFileUrl: undefined,
        },
      ],
      chargeRows: [
        {
          id: 1,
          chargesType: "Discount",
          percentage: discountPercentage,
          value: discountValue,
          totalChargesvalue: 0,
          addOnValue: undefined,
          additionalChargesRequired: "",
          additionalType: "",
        },
        {
          id: 2,
          chargesType: "Support",
          percentage: supportPercentage,
          value: supportValue,
          totalChargesvalue: 0,
          addOnValue: undefined,
          additionalChargesRequired: "",
          additionalType: "",
        },
      ],
    };
  };

  const [showHistoryModal, setShowHistoryModal] = useState(false);
  // const [isLoading, setIsLoading] = useState(false);
  const [historyLoading, setHistoryLoading] = useState(false);
  const [invoiceHistoryData, setInvoiceHistoryData] = useState<any[]>([]);
  // ...existing code...
  const InvoiceList = "CMSRequestDetails";
  // const [isAzureSectionOpen, setIsAzureSectionOpen] = useState(false);

  const handleHistoryClick = async (
    e: React.MouseEvent<HTMLButtonElement>,
    row: any
  ) => {
    e.preventDefault();
    const InvoiceHistory = "CMSPaymentHistory";
    const filterQuery = `$select=*,Author/Title&$expand=Author&$filter=CMSRequestItemID eq '${row.itemID}'&$orderby=Id desc`;

    setHistoryLoading(true);
    setShowHistoryModal(true);

    try {
      const response = await getSharePointData(
        { context },
        InvoiceHistory,
        filterQuery
      );
      setInvoiceHistoryData(response || []);
    } catch (error) {
      setInvoiceHistoryData([]);
    } finally {
      setHistoryLoading(false);
    }
  };

  useEffect(() => {
    const fetchInvoiceDocuments = async () => {
      const filterQuery = `$select=*,FileLeafRef,FileRef,EncodedAbsUrl,ServerRedirectedEmbedUri&$top=5000`;
      const docs = await getDocumentLibraryData(
        invoiceDocument,
        filterQuery,
        siteUrl
      );
      setInvoiceDocuments(docs || []);
    };
    fetchInvoiceDocuments();
  }, [siteUrl, invoiceDocument, rows]);

  const pendingStatuses = ["Hold", "Open", "Pending From Approver", "Reminder"];
  const proceedButtonCount = rows.filter(
    (row) =>
      row.invoiceStatus === "Started" &&
      selectedRow?.employeeEmail === currentUserEmail &&
      !pendingStatuses.includes(approverStatus)
  ).length;

  useEffect(() => {
    if (onProceedButtonCountChange) {
      onProceedButtonCountChange(proceedButtonCount);
    }
    // eslint-disable-next-line
  }, [
    proceedButtonCount,
    onProceedButtonCountChange,
    rows,
    selectedRow,
    currentUserEmail,
    approverStatus,
  ]);
  // ...existing code...
  useEffect(() => {
    onDataChange(rows);
  }, [rows, onDataChange]);

  useEffect(() => {
    if (rowEdit === "Yes") {
      rows.forEach((row) => {
        if (row.itemID) checkRowHistory(row);
      });
    }
  }, [rowEdit, rows]);

  /* useEffect(() => {
     if (
       rowEdit === "Yes" &&
       Array.isArray(setInvoiceRows) &&
       setInvoiceRows.length > 0
     ) {
       Promise.all(
         setInvoiceRows.map(async (item, idx) => {
           let popupRows: PopupRow[] = [
             {
               id: 1,
               type: "",
               invoiceValue: "",
               azureFileId: undefined,
               azureFileName: undefined,
               azureFileUrl: undefined,
             },
           ];
           let chargeRows: ChargeRow[] = [];
 
           if (item && item.Id) {
             console.log(item.Id, "item && item.Id");
 
             const filter = `$filter=InvoiceID eq ${item.Id}`;
 
             const azureData = await getSharePointData(
               { context },
               azureList,
               filter
             );
             popupRows = await Promise.all(
               (azureData || []).map(async (azItem: any, popupIdx: number) => {
                 let azureFileName = azItem.FileLeafRef;
                 let azureFileUrl = azItem.EncodedAbsUrl;
                 if (azItem.AzureFileID) {
                   const filterQuery = `$select=*,FileLeafRef,FileRef,EncodedAbsUrl,ServerRedirectedEmbedUri&$filter=(AzureFileID eq '${azItem.AzureFileID}')&$orderby=Id desc`;
                   const files = await getDocumentLibraryData(
                     CMSAzureDocuments,
                     filterQuery,
                     siteUrl
                   );
                   if (files && files.length > 0) {
                     azureFileName = files[0].FileLeafRef;
                     azureFileUrl = files[0].EncodedAbsUrl;
                   }
                 }
                 return {
                   id: popupIdx + 1,
                   type: azItem.AzureType || "",
                   invoiceValue: azItem.InvoiceValue
                     ? String(azItem.InvoiceValue)
                     : "",
                   azureFileId: azItem.AzureFileID,
                   azureFileName,
                   azureFileUrl,
                 };
               })
             );
 
             const chargesData = await getSharePointData(
               { context },
               chargesList,
               filter
             );
             console.log(chargesData, "chargesData1");
             chargeRows = (chargesData || []).map(
               (chargeItem: any, cidx: number) => ({
                 id: cidx + 1,
                 percentage: chargeItem.Percentage ?? "",
                 value: chargeItem.Value != null ? Number(chargeItem.Value) : 0,
                 totalChargesvalue:
                   chargeItem.TotalCharges != null
                     ? Number(chargeItem.TotalCharges)
                     : 0,
                 addOnValue:
                   chargeItem.AddOnValue != null
                     ? Number(chargeItem.AddOnValue)
                     : undefined,
                 additionalChargesRequired:
                   chargeItem.AdditionalChargesRequired || "",
                 additionalType: chargeItem.AdditionalType || "",
                 chargesType: chargeItem.ChargesType || "",
               })
             );
             console.log(chargeRows, "chargeRows1");
           }
 
           return {
             id: idx + 1,
             itemID: item?.Id || null,
             description: item?.Comments || "",
             
 
             ProceedDate: item?.ProceedDate
               ? new Date(item.ProceedDate).toLocaleDateString("en-CA")
               : new Date().toLocaleDateString("en-CA"),
 
             totalInvoiceAmount: item?.InvoiceAmount || "",
             dueDate: item?.InvoiceDueDate
               ? new Date(item.InvoiceDueDate).toLocaleDateString("en-CA")
               : "",
             invoiceStatus: item?.InvoiceStatus || "",
             InvoiceFileID: item?.InvoiceFileID || "",
             isOpen: false,
             popupRows,
             chargeRows,
           };
         })
       ).then((rowsWithDetails) => setRows(rowsWithDetails));
     }
   }, [rowEdit, setInvoiceRows, context, siteUrl]); */

  useEffect(() => {
    if (
      rowEdit === "Yes" &&
      Array.isArray(setInvoiceRows) &&
      setInvoiceRows.length > 0
    ) {
      // setIsDisabled(true);
      Promise.all(
        setInvoiceRows.map(async (item, idx) => {
          let popupRows: PopupRow[] = [
            {
              id: 1,
              type: "",
              invoiceValue: "",
              azureFileId: undefined,
              azureFileName: undefined,
              azureFileUrl: undefined,
            },
          ];
          let chargeRows: ChargeRow[] = [];

          if (item && item.Id) {
            const filter = `$filter=InvoiceID eq ${item.Id}`;
            const azureData = await getSharePointData(
              { context },
              azureList,
              filter
            );
            popupRows = await Promise.all(
              (azureData || []).map(async (azItem: any, popupIdx: number) => {
                let azureFileName = azItem.FileLeafRef;
                let azureFileUrl = azItem.EncodedAbsUrl;
                if (azItem.AzureFileID) {
                  const filterQuery = `$select=*,FileLeafRef,FileRef,EncodedAbsUrl,ServerRedirectedEmbedUri&$filter=(AzureFileID eq '${azItem.AzureFileID}')&$orderby=Id desc`;
                  const files = await getDocumentLibraryData(
                    CMSAzureDocuments,
                    filterQuery,
                    siteUrl
                  );
                  if (files && files.length > 0) {
                    azureFileName = files[0].FileLeafRef;
                    azureFileUrl = files[0].EncodedAbsUrl;
                  }
                }
                return {
                  id: popupIdx + 1,
                  type: azItem.AzureType || "",
                  invoiceValue: azItem.InvoiceValue
                    ? String(azItem.InvoiceValue)
                    : "",
                  azureFileId: azItem.AzureFileID,
                  azureFileName,
                  azureFileUrl,
                };
              })
            );

            const chargesData = await getSharePointData(
              { context },
              chargesList,
              filter
            );
            chargeRows = (chargesData || []).map(
              (chargeItem: any, cidx: number) => ({
                id: cidx + 1,
                percentage: chargeItem.Percentage ?? "",
                value: chargeItem.Value != null ? Number(chargeItem.Value) : 0,
                totalChargesvalue:
                  chargeItem.TotalCharges != null
                    ? Number(chargeItem.TotalCharges)
                    : 0,
                addOnValue:
                  chargeItem.AddOnValue != null
                    ? Number(chargeItem.AddOnValue)
                    : undefined,
                additionalChargesRequired:
                  chargeItem.AdditionalChargesRequired || "",
                additionalType: chargeItem.AdditionalType || "",
                chargesType: chargeItem.ChargesType || "",
              })
            );
          }

          return {
            id: idx + 1,
            itemID: item?.Id || null,
            description: item?.Comments || "",
            isAutoGenerated: false,
            ProceedDate: item?.ProceedDate
              ? new Date(item.ProceedDate).toLocaleDateString("en-CA")
              : new Date().toLocaleDateString("en-CA"),
            totalInvoiceAmount: item?.InvoiceAmount || "",
            dueDate: item?.InvoiceDueDate
              ? new Date(item.InvoiceDueDate).toLocaleDateString("en-CA")
              : "",
            invoiceStatus: item?.InvoiceStatus || "",
            InvoiceFileID: item?.InvoiceFileID || "",
            isOpen: false,
            popupRows,
            chargeRows,
          };
        })
      ).then((rowsWithDetails) => {
        if (selectedRow?.employeeEmail === currentUserEmail) {
          const sortedRows = [...rowsWithDetails].sort((a, b) =>
            moment(a.dueDate, "YYYY-MM-DD").isAfter(
              moment(b.dueDate, "YYYY-MM-DD")
            )
              ? 1
              : -1
          );
          const lastRow = sortedRows[sortedRows.length - 1];
          const lastDueDate = lastRow?.dueDate
            ? moment(lastRow.dueDate, ["YYYY-MM-DD", "DD-MM-YYYY", "en-CA"])
            : null;

          const today = moment();
          // let newRowsToAdd: any[] = [];

          let newRowsToAdd: any[] = [];

          if (lastDueDate) {
            if (
              lastDueDate.date() === 3 &&
              lastDueDate.month() === 3 &&
              rowsWithDetails.length > 1
            ) {
              setRows(rowsWithDetails);
              return;
            }

            let nextMonth = lastDueDate.clone().add(1, "month");
            let currentDueDate = lastDueDate.clone();
            let maxId = Math.max(...rowsWithDetails.map((r) => r.id), 0);

            while (
              nextMonth.isBefore(today, "month") ||
              nextMonth.isSame(today, "month")
            ) {
              // setIsDisabled(false);
              // console.log(isdisabled);
              maxId++;
              const newRow = createNewAzureRow(currentDueDate.toDate(), maxId);
              newRowsToAdd.push(newRow);

              // prepare for next loop
              currentDueDate = moment(newRow.dueDate, "YYYY-MM-DD");
              nextMonth = currentDueDate.clone().add(1, "month");
            }
          }

          setRows([...rowsWithDetails, ...newRowsToAdd]);
        } else {
          setRows(rowsWithDetails);
        }
      });
    }
  }, [rowEdit, setInvoiceRows, context, siteUrl]);

  // console.log(setInvoiceRows, rows, "setInvoiceRows");

  const fetchAzureDetailsByInvoiceId = async (itemID: number | null) => {
    if (rowEdit !== "Yes" || !itemID) return;
    try {
      const filter = `$filter=InvoiceID eq ${itemID}`;
      const data = await getSharePointData({ context }, azureList, filter);

      const popupRowsFromAzure = await Promise.all(
        (data || []).map(async (item: any, idx: number) => {
          let azureFileName = item.FileLeafRef;
          let azureFileUrl = item.EncodedAbsUrl;
          if (item.AzureFileID) {
            const filterQuery = `$select=*,FileLeafRef,FileRef,EncodedAbsUrl,ServerRedirectedEmbedUri&$filter=(AzureFileID eq '${item.AzureFileID}')&$orderby=Id desc`;

            const files = await getDocumentLibraryData(
              CMSAzureDocuments,
              filterQuery,
              siteUrl
            );

            if (files && files.length > 0) {
              azureFileName = files[0].FileLeafRef;
              azureFileUrl = files[0].EncodedAbsUrl;
            } else {
              azureFileName = item.FileLeafRef;
              azureFileUrl = item.EncodedAbsUrl;
            }
          }
          return {
            id: idx + 1,
            type: item.AzureType || "",
            invoiceValue: item.InvoiceValue ? String(item.InvoiceValue) : "",
            azureFileId: item.AzureFileID,
            azureFileName,
            azureFileUrl,
          };
        })
      );

      const chargesdata = await getSharePointData(
        { context },
        chargesList,
        filter
      );

      const chargeRowsFromAzure = (chargesdata || []).map(
        (item: any, idx: number) => ({
          id: idx + 1,
          chargesType: item.ChargesType || "",
          percentage: item.Percentage ?? "",
          value: item.Value != null ? Number(item.Value) : 0,
          totalChargesvalue:
            item.TotalCharges != null ? Number(item.TotalCharges) : 0,
          additionalType: item.AdditionalType || "",
          additionalChargesRequired: item.AdditionalChargesRequired || "",

          addOnValue: item.AddOnValue != null ? Number(item.AddOnValue) : 0,
        })
      );

      setRows((prevRows) =>
        prevRows.map((row) =>
          row.itemID === itemID
            ? {
                ...row,
                popupRows: popupRowsFromAzure,
                chargeRows: chargeRowsFromAzure,
              }
            : row
        )
      );
    } catch (error) {
      console.error("Error fetching Azure details:", error);
    }
  };

  const handleToggleRow = (e: any, rowId: number, itemID: number) => {
    e.preventDefault();
    setRows((prevRows) =>
      prevRows.map((row) =>
        row.id === rowId ? { ...row, isOpen: !row.isOpen } : row
      )
    );
    if (rowEdit === "Yes") {
      fetchAzureDetailsByInvoiceId(itemID);
    }
  };

  const handleAddPopupRow = (e: any, rowId: number) => {
    e.preventDefault(); // Prevent default action of the button
    setRows((prevRows) =>
      prevRows.map((row) => {
        if (row.id === rowId) {
          // Find max S No (id) in popupRows
          const maxPopupId =
            row.popupRows.length > 0
              ? Math.max(...row.popupRows.map((pr) => pr.id))
              : 0;
          return {
            ...row,
            popupRows: [
              ...row.popupRows,
              {
                id: maxPopupId + 1,
                type: "",
                invoiceValue: "",
                azureFileId: undefined,
                azureFileName: undefined,
                azureFileUrl: undefined,
              },
            ],
          };
        }
        return row;
      })
    );
  };

  // const handlePopupRowChange = (
  //   rowId: number,
  //   index: number,
  //   field: keyof PopupRow,
  //   value: string
  // ) => {
  //   setRows((prevRows) =>
  //     prevRows.map((row) =>
  //       row.id === rowId
  //         ? {
  //           ...row,
  //           popupRows: row.popupRows.map((popupRow, i) =>
  //             i === index ? { ...popupRow, [field]: value } : popupRow
  //           ),
  //         }
  //         : row
  //     )
  //   );
  // };

  // ...existing code...

  const handlePopupRowChange = (
    rowId: number,
    index: number,
    field: keyof PopupRow,
    value: string
  ) => {
    setRows((prevRows) =>
      prevRows.map((row) => {
        if (row.id === rowId) {
          // Update popupRows
          const updatedPopupRows = row.popupRows.map((popupRow, i) =>
            i === index ? { ...popupRow, [field]: value } : popupRow
          );
          // Calculate new invoice total
          // console.log(updatedPopupRows, "updatedPopupRows")
          const invoiceTotal = parseFloat(getInvoiceTotal(updatedPopupRows));
          // Update chargeRows based on new invoice total
          // console.log(row.chargeRows, "row.chargeRowsbefore")
          const updatedChargeRows = row.chargeRows.map((chargeRow) => {
            const percentage = Number(chargeRow.percentage) || 0;
            const val = Number(chargeRow.value) || 0;
            let addOnValue = Number(chargeRow.addOnValue) || 0;
            const additionalType = chargeRow.additionalType
              ? chargeRow.additionalType.toLowerCase()
              : "";
            const isChecked =
              additionalChargesChecked[`${row.id}_${chargeRow.id}`] || false;
            let newTotal = 0;
            let totalPerc;
            if (percentage) {
              if (isChecked && additionalType === "percentage") {
                totalPerc = percentage + addOnValue;
                if (totalPerc < 0) totalPerc = 0;
                newTotal = (totalPerc * invoiceTotal) / 100;
              } else if (isChecked && additionalType === "value") {
                newTotal = (percentage * invoiceTotal) / 100 + addOnValue;
              } else {
                newTotal = (percentage * invoiceTotal) / 100;
              }
            } else if (val) {
              if (isChecked && additionalType === "percentage") {
                let totalPerc = addOnValue;
                if (totalPerc < 0) totalPerc = 0;
                newTotal = (totalPerc * invoiceTotal) / 100 + val;
              } else if (isChecked && additionalType === "value") {
                newTotal = addOnValue + val;
              } else {
                newTotal = val;
              }
            } else {
              if (isChecked && additionalType === "percentage") {
                totalPerc = percentage + addOnValue;
                if (totalPerc < 0) totalPerc = 0;
                newTotal = (totalPerc * invoiceTotal) / 100;
              } else if (isChecked && additionalType === "value") {
                newTotal = (percentage * invoiceTotal) / 100 + addOnValue;
              } else {
                newTotal = (percentage * invoiceTotal) / 100;
              }
            }
            if (newTotal < 0) newTotal = 0;
            // console.log(newTotal, "newTotal123")
            return { ...chargeRow, totalChargesvalue: newTotal };
          });
          // console.log(updatedChargeRows, "updatedChargeRows")
          return {
            ...row,
            popupRows: updatedPopupRows,
            chargeRows: updatedChargeRows,
          };
        }
        // console.log(row, "fnal row");
        return row;
      })
    );
  };

  const getTotalInvoiceAmount = (
    popupRows: PopupRow[],
    chargeRows: ChargeRow[]
  ) => {
    const totalInvoiceValue = parseFloat(getInvoiceTotal(popupRows));
    let supportCharges = 0;
    let discountCharges = 0;

    if (!chargeRows || chargeRows.length === 0) {
      return totalInvoiceValue.toFixed(2);
    }

    chargeRows.forEach((row) => {
      const percentage = Number(row.percentage) || 0;
      const value = Number(row.value) || 0;
      let addOnValue = Number(row.addOnValue) || 0;
      const additionalType = row.additionalType
        ? row.additionalType.toLowerCase()
        : "";
      // If you have a checkbox for additional charges, you can check it here if needed

      let total = 0;
      if (percentage) {
        if (additionalType === "percentage") {
          let totalPerc = percentage + addOnValue;
          if (totalPerc < 0) totalPerc = 0;
          total = (totalPerc * totalInvoiceValue) / 100;
        } else if (additionalType === "value") {
          total = (percentage * totalInvoiceValue) / 100 + addOnValue;
        } else {
          total = (percentage * totalInvoiceValue) / 100;
        }
      } else if (value) {
        if (additionalType === "percentage") {
          let totalPerc = addOnValue;

          if (totalPerc < 0) totalPerc = 0;
          total = (totalPerc * totalInvoiceValue) / 100 + value;
        } else if (additionalType === "value") {
          total = addOnValue + value;
        } else {
          total = value;
        }
      } else {
        if (additionalType === "percentage") {
          let totalPerc = percentage + addOnValue;
          if (totalPerc < 0) totalPerc = 0;
          total = (totalPerc * totalInvoiceValue) / 100;
        } else if (additionalType === "value") {
          total = (percentage * totalInvoiceValue) / 100 + addOnValue;
        } else {
          total = (percentage * totalInvoiceValue) / 100;
        }
      }

      if (row.chargesType === "Support") {
        supportCharges += total;
      } else if (row.chargesType === "Discount") {
        discountCharges += total;
      }
    });

    // Total Invoice Amount = (Total Invoice Value + Support) - Discount
    return (totalInvoiceValue + supportCharges - discountCharges).toFixed(2);
  };

  const handleChargeRowChange = (
    rowId: number,
    chargeRowId: number,
    field: keyof ChargeRow,
    value: any
  ) => {
    setRows((prevRows) =>
      prevRows.map((row) =>
        row.id === rowId
          ? {
              ...row,
              chargeRows: row.chargeRows.map((chargeRow) => {
                if (chargeRow.id === chargeRowId) {
                  const updatedChargeRow = { ...chargeRow, [field]: value };
                  const invoiceTotal = parseFloat(
                    getInvoiceTotal(row.popupRows)
                  );
                  const percentage = Number(updatedChargeRow.percentage) || 0;
                  const val = Number(updatedChargeRow.value) || 0;
                  let addOnValue = Number(updatedChargeRow.addOnValue) || 0;
                  const additionalType = updatedChargeRow.additionalType
                    ? updatedChargeRow.additionalType.toLowerCase()
                    : "";
                  const isChecked =
                    additionalChargesChecked[`${row.id}_${chargeRow.id}`] ||
                    false;
                  let newTotal = 0;
                  let totalPerc;
                  if (percentage) {
                    if (isChecked && additionalType === "percentage") {
                      totalPerc = percentage + addOnValue;
                      if (totalPerc < 0) totalPerc = 0;
                      newTotal = (totalPerc * invoiceTotal) / 100;
                    } else if (isChecked && additionalType === "value") {
                      newTotal = (percentage * invoiceTotal) / 100 + addOnValue;
                    } else {
                      newTotal = (percentage * invoiceTotal) / 100;
                    }
                  } else if (val) {
                    if (isChecked && additionalType === "percentage") {
                      let totalPerc = addOnValue;
                      if (totalPerc < 0) totalPerc = 0;
                      newTotal = (totalPerc * invoiceTotal) / 100 + val;
                    } else if (isChecked && additionalType === "value") {
                      newTotal = addOnValue + val;
                    } else {
                      newTotal = val;
                    }
                  } else {
                    // newTotal = 0;
                    if (isChecked && additionalType === "percentage") {
                      totalPerc = percentage + addOnValue;
                      if (totalPerc < 0) totalPerc = 0;
                      newTotal = (totalPerc * invoiceTotal) / 100;
                    } else if (isChecked && additionalType === "value") {
                      newTotal = (percentage * invoiceTotal) / 100 + addOnValue;
                    } else {
                      newTotal = (percentage * invoiceTotal) / 100;
                    }
                  }
                  if (newTotal < 0) newTotal = 0;

                  return { ...updatedChargeRow, totalChargesvalue: newTotal };
                }
                return chargeRow;
              }),
            }
          : row
      )
    );
  };

  // Loader overlay
  const LoaderOverlay = () => (
    <div
      style={{
        position: "fixed",
        top: 0,
        left: 0,
        width: "100vw",
        height: "100vh",
        background: "rgba(255,255,255,0.6)",
        zIndex: 9999,
        display: "flex",
        alignItems: "center",
        justifyContent: "center",
      }}
    >
      <Spinner animation="border" variant="primary" />
      <span className="ms-3">Processing...</span>
    </div>
  );

  const handleUpdateAzureRow = async (e: any, row: any) => {
    e.preventDefault();
    setIsLoading(true);
    try {
      if (!row.itemID) {
        console.error("Item ID is missing for the row.");
        setIsLoading(false);
        return;
      }
      const data = {
        ProceedDate: new Date().toLocaleDateString("en-CA"),
        InvoiceStatus: "Proceeded",
        RunWF: "Yes",
      };

      try {
        const response = await updateDataToSharePoint(
          InvoiceList,
          data,
          siteUrl,
          row.itemID
        );
        console.log("Invoice row updated successfully:", response);

        setRows((prevRows) =>
          prevRows.map((r) =>
            r.id === row.id ? { ...r, invoiceStatus: "Proceeded" } : r
          )
        );

        setIsLoading(false);
        alert("Invoice row updated successfully!");
        // window.location.reload(); // Reload the page to reflect changes
      } catch (error) {
        console.error("Error updating invoice row:", error);
        setIsLoading(false);
        alert("Failed to update invoice row.");
      }
    } catch (error) {
      console.error("Error submitting row:", error);

      setIsLoading(false);
      alert("Failed to submit row.");
    }
  };

  // Add handler to delete a popup row
  const handleDeletePopupRow = (rowId: number, index: number) => {
    setRows((prevRows) =>
      prevRows.map((row) =>
        row.id === rowId
          ? {
              ...row,
              popupRows: row.popupRows
                .filter((_, i) => i !== index)
                .map((popupRow, idx) => ({
                  ...popupRow,
                  id: idx + 1, // Re-index S.No in series
                })),
            }
          : row
      )
    );
  };

  const handleDescriptionChange = (value: any, row: any) => {
    // Update the description for the specific row in your state
    // Example if using an array of rows:
    setRows((prevRows) =>
      prevRows.map((r) => (r.id === row.id ? { ...r, description: value } : r))
    );
  };

  const [popupRowFiles, setPopupRowFiles] = useState<{
    [key: string]: File | null;
  }>({});
  const [popupRowFileUploaded, setPopupRowFileUploaded] = useState<{
    [key: string]: boolean;
  }>({});
  console.log(popupRowFileUploaded);
  const handlePopupFileChange = (
    e: React.ChangeEvent<HTMLInputElement>,
    rowId: number,
    popupIndex: number
  ) => {
    const file = e.target.files && e.target.files[0];
    setPopupRowFiles((prev) => ({
      ...prev,
      [`${rowId}_${popupIndex}`]: file || null,
    }));
  };

  const handlePopupFileUpload = async (rowId: number, popupIndex: number) => {
    const file = popupRowFiles[`${rowId}_${popupIndex}`];
    setIsLoading(true);
    if (!file) {
      setIsLoading(false);
      alert("Please select a file before uploading.");
      return;
    }
    const uniqueId = Math.random().toString(36).substr(2, 16).toUpperCase();
    const updateMetadata = {
      AzureFileID: uniqueId,
      UserEmail: currentUserEmail || " ",
    };
    const filterQuery = `AzureFileID eq '${uniqueId}'`;
    const selectedValues =
      "Id,FileLeafRef,AzureFileID,FileRef,EncodedAbsUrl,FileLeafRef,UserEmail";
    try {
      const fileData = await addFileInSharepoint(
        file,
        updateMetadata,
        CMSAzureDocuments,
        filterQuery,
        selectedValues
      );
      if (fileData && fileData.length > 0) {
        const uploaded = fileData[0];
        setRows((prevRows) =>
          prevRows.map((row) =>
            row.id === rowId
              ? {
                  ...row,
                  popupRows: row.popupRows.map((popupRow, i) =>
                    i === popupIndex
                      ? {
                          ...popupRow,
                          azureFileId: uploaded.AzureFileID,
                          azureFileName: uploaded.FileLeafRef,
                          azureFileUrl: uploaded.EncodedAbsUrl,
                        }
                      : popupRow
                  ),
                }
              : row
          )
        );
        setPopupRowFiles((prev) => ({
          ...prev,
          [`${rowId}_${popupIndex}`]: null,
        }));
        setPopupRowFileUploaded((prev) => ({
          ...prev,
          [`${rowId}_${popupIndex}`]: true,
        }));
        setIsLoading(false);
      }
    } catch (error) {
      console.error("Error uploading file:", error);
      alert("Error uploading file.");
    }
  };

  const handlePopupFileDelete = async (
    rowId: number,
    popupIndex: number,
    fileId: string | undefined
  ) => {
    if (!fileId) return;
    if (!window.confirm("Are you sure you want to delete this file?")) return;
    try {
      // Find the SharePoint item ID for the file (assume AzureFileID is unique)
      // You may need to adjust this if you store the actual SharePoint item ID
      // For now, use a filter to get the item by AzureFileID
      const filterQuery = `AzureFileID eq '${fileId}'`;
      const files = await getSharePointData(
        { context },
        CMSAzureDocuments,
        filterQuery
      );
      if (files && files.length > 0) {
        const spItemId = files[0].Id;
        await deleteAttachmentFile(CMSAzureDocuments, spItemId);
        setRows((prevRows) =>
          prevRows.map((row) =>
            row.id === rowId
              ? {
                  ...row,
                  popupRows: row.popupRows.map((popupRow, i) =>
                    i === popupIndex
                      ? {
                          ...popupRow,
                          azureFileId: undefined,
                          azureFileName: undefined,
                          azureFileUrl: undefined,
                        }
                      : popupRow
                  ),
                }
              : row
          )
        );
        setPopupRowFileUploaded((prev) => ({
          ...prev,
          [`${rowId}_${popupIndex}`]: false,
        }));
      }
    } catch (error) {
      console.error("Error deleting file:", error);
      alert("Failed to delete file.");
    }
  };

  // Fetch file info for popup rows in edit mode if needed
  useEffect(() => {
    if (rowEdit === "Yes") {
      rows.forEach((row, rowIdx) => {
        row.popupRows.forEach(async (popupRow, popupIdx) => {
          // console.log(popupRow, "beforefile")
          // if (popupRow.azureFileId && !popupRow.azureFileUrl) {
          const filterQuery = `AzureFileID eq '${popupRow.azureFileId}'`;
          const files = await getSharePointData(
            { context },
            CMSAzureDocuments,
            filterQuery
          );
          if (files && files.length > 0) {
            const file = files[0];
            setRows((prevRows) =>
              prevRows.map((r, i) =>
                i === rowIdx
                  ? {
                      ...r,
                      popupRows: r.popupRows.map((pr, j) =>
                        j === popupIdx
                          ? {
                              ...pr,
                              azureFileName: file.FileLeafRef,
                              azureFileUrl: file.EncodedAbsUrl,
                            }
                          : pr
                      ),
                    }
                  : r
              )
            );
          }
          // }
        });
      });
    }
  }, [rowEdit, context]);

  // useEffect(() => {
  //   setRows((prevRows) => {
  //     const updatedRows = prevRows.map((row, rowIdx) => {
  //       if (!row.chargeRows || row.chargeRows.length === 0) return row;
  //       const invoiceTotal = parseFloat(getInvoiceTotal(row.popupRows));
  //       const updatedChargeRows = row.chargeRows.map((chargeRow, i) => {
  //         let newTotal = 0;
  //         const percentage = Number(chargeRow.percentage) || 0;
  //         const value = Number(chargeRow.value) || 0;
  //         let addOnValue = Number(chargeRow.addOnValue);
  //         if (isNaN(addOnValue)) addOnValue = 0;
  //         const additionalType = chargeRow.additionalType
  //           ? chargeRow.additionalType.toLowerCase()
  //           : "";
  //         const isChecked =
  //           additionalChargesChecked[`${row.id}_${chargeRow.id}`] || false;

  //         if (percentage) {
  //           if (isChecked && additionalType === "percentage") {
  //             let totalPerc = percentage + addOnValue;
  //             if (totalPerc < 0) totalPerc = 0;
  //             newTotal = (totalPerc * invoiceTotal) / 100;
  //           } else if (isChecked && additionalType === "value") {
  //             newTotal = (percentage * invoiceTotal) / 100 + addOnValue;
  //           } else {
  //             newTotal = (percentage * invoiceTotal) / 100;
  //           }
  //         } else if (value) {
  //           if (isChecked && additionalType === "percentage") {
  //             let totalPerc = addOnValue;
  //             if (totalPerc < 0) totalPerc = 0;
  //             newTotal = (totalPerc * invoiceTotal) / 100 + value;
  //           } else if (isChecked && additionalType === "value") {
  //             newTotal = addOnValue + value;
  //           } else {
  //             newTotal = value;
  //           }
  //         } else {
  //           newTotal = 0;
  //         }
  //         if (newTotal < 0) newTotal = 0;
  //         return { ...chargeRow, totalChargesvalue: newTotal };
  //       });
  //       return { ...row, chargeRows: updatedChargeRows };
  //     });
  //     return updatedRows;
  //   });
  //   // eslint-disable-next-line
  // }, [
  //   rows.map((r) => r.popupRows.map((p) => p.invoiceValue).join(",")).join(","),
  //   customerDetails,
  //   selectedCustomerName,
  // ]);

  // Restore the original dynamic fetching of chargesTypes and additionalRowsTypes

  const ChargesTypeMaster = "CMSChargesTypeMaster";
  const [chargesTypes, setChargesTypes] = useState<string[]>([]);
  console.log(chargesTypes, "chargesTypes");
  const [additionalRowsTypes, setAdditionalRowsTypes] = useState<string[]>([]);

  useEffect(() => {
    const fetchData = async () => {
      try {
        const chargesTypesData = await getSharePointData(
          { context },
          ChargesTypeMaster,
          ""
        );
        setChargesTypes(
          chargesTypesData
            .map((i: any) => i.Title)
            .filter((title: string) => title && title.trim() !== "")
        );
        setAdditionalRowsTypes(
          chargesTypesData
            .map((i: any) => i.AdditionalTypes)
            .filter((type: string) => type && type.trim() !== "")
        );
      } catch (error) {
        console.error("Error fetching dropdown data:", error);
      }
    };
    void fetchData();
  }, [context]);

  // Restore InvoiceList if needed for usage in the file

  return (
    <div>
      {isLoading && <LoaderOverlay />}

      <div className="mt-4">
        <div className="d-flex align-items-center justify-content-between section-header">
          <div
            onClick={(e) => {
              e.preventDefault();
              setIsCollapsed((prev) => !prev);
            }}
            aria-expanded={isCollapsed}
            aria-controls="azureDetailsCollapse"
          >
            <h5 className="mt-2 fw-bold headingColor">Azure Section</h5>
          </div>
          <div>
            {/*   {rowEdit !== "Yes" && (
              <button
                className="btn btn-success me-2"
                type="button"
                onClick={handleAddAzureRow}
              >
                <FontAwesomeIcon icon={faPlus} /> Add Azure Row
              </button>
            )}*/}
            <button
              className="btn btn-link btn-sm"
              onClick={(e) => {
                e.preventDefault();
                setIsCollapsed((prev) => !prev);
              }}
              aria-expanded={isCollapsed}
              aria-controls="azureDetailsCollapse"
              style={{ textDecoration: "none", color: "#ffffff" }}
            >
              {isCollapsed ? (
                <FontAwesomeIcon icon={faAngleUp} />
              ) : (
                <FontAwesomeIcon icon={faAngleDown} />
              )}
            </button>
          </div>
        </div>
        <div
          className={`${
            isCollapsed ? "collapse show" : "collapse"
          } section-content`}
          id="azureDetailsCollapse"
        >
          {" "}
          <div>
            <table className="table table-bordered">
              <thead>
                <tr>
                  <th>S No</th>
                  <th>
                    Description<span style={{ color: "red" }}>*</span>
                  </th>
                  <th>
                    Invoice Due Date<span style={{ color: "red" }}>*</span>
                  </th>
                  {rowEdit === "Yes" && <th>Proceed Date</th>}
                  {rowEdit === "Yes" && <th>Invoice Attachment</th>}

                  {/* {rows.some(
                  (row) => row.invoiceStatus === "Generated"
                ) && <th>Invoice Attachment</th>} */}
                  <th>Action</th>
                </tr>
              </thead>
              <tbody>
                {rows
                  .filter((row) => {
                    console.log(
                      row,
                      "row.invoiceStatusrow.invoiceStatus----------"
                    );

                    if (userGroups.includes("CMSAccountGroup")) {
                      return row.invoiceStatus !== "Started";
                    }

                    return true;
                  })
                  .map(
                    (row) => (
                      console.log(row, "rowdata---"),
                      (
                        <React.Fragment key={row.id}>
                          <tr>
                            <td>{row.id}</td>
                            <td>
                              <textarea
                                value={row.description}
                                className="form-control"
                                disabled={
                                  rowEdit === "Yes" && !row.isAutoGenerated
                                }
                                onChange={(e) =>
                                  handleDescriptionChange(e.target.value, row)
                                }
                              />
                            </td>
                            <td>
                              <DatePicker
                                className="form-control"
                                format="DD-MM-YYYY"
                                value={
                                  row.dueDate
                                    ? moment(row.dueDate, [
                                        "DD-MM-YYYY",
                                        "YYYY-MM-DD",
                                      ]).isValid()
                                      ? moment(row.dueDate, [
                                          "DD-MM-YYYY",
                                          "YYYY-MM-DD",
                                        ])
                                      : null
                                    : null
                                }
                                disabled
                                allowClear
                                style={{ width: "100%" }}
                              />
                            </td>
                            {rowEdit === "Yes" && !row.isAutoGenerated && (
                              <td>
                                <DatePicker
                                  className="form-control"
                                  format="DD-MM-YYYY"
                                  value={
                                    row.dueDate
                                      ? moment(row.ProceedDate, [
                                          "DD-MM-YYYY",
                                          "YYYY-MM-DD",
                                        ]).isValid()
                                        ? moment(row.ProceedDate, [
                                            "DD-MM-YYYY",
                                            "YYYY-MM-DD",
                                          ])
                                        : null
                                      : null
                                  }
                                  disabled
                                  allowClear
                                  style={{ width: "100%" }}
                                />
                              </td>
                            )}

                            {rowEdit === "Yes" &&
                            row.isAutoGenerated &&
                            row.invoiceStatus === "Generated" ? (
                              <td>
                                {row.InvoiceFileID ? (
                                  (() => {
                                    console.log(
                                      row.InvoiceFileID,
                                      "row.InvoiceFileIDrow.InvoiceFileID0909"
                                    );
                                    const file = invoiceDocuments.find(
                                      (doc: any) =>
                                        doc.DocID === row.InvoiceFileID
                                    );
                                    return file ? (
                                      <button
                                        type="button"
                                        className="btn btn-link"
                                        style={{
                                          display: "flex",
                                          alignItems: "center",
                                          gap: 4,
                                        }}
                                        // onClick={() => window.open(file.EncodedAbsUrl, "_blank")}
                                        onClick={(e) =>
                                          handleDownload(
                                            e,
                                            file.EncodedAbsUrl,
                                            { context }
                                          )
                                        }
                                      >
                                        {file.FileLeafRef}
                                      </button>
                                    ) : (
                                      <span>No file found</span>
                                    );
                                  })()
                                ) : (
                                  <span>No file found</span>
                                )}
                              </td>
                            ) : rowEdit === "Yes" && !row.isAutoGenerated ? (
                              <td />
                            ) : null}

                            <td>
                              <button
                                className="btn btn-primary btn-sm"
                                onClick={(e) =>
                                  handleToggleRow(
                                    e,
                                    row.id,
                                    row.itemID ?? row.id
                                  )
                                }
                                style={{ marginRight: "10px" }}
                              >
                                {row.isOpen ? "Hide" : "Show"} Additional Rows
                              </button>
                              {rowEdit !== "Yes" && row.isAutoGenerated && (
                                <button
                                  className="btn btn-danger btn-sm"
                                  style={{ marginRight: "10px" }}
                                  onClick={(e) => {
                                    e.preventDefault();
                                    if (rows.length === 1) return;
                                    if (
                                      window.confirm(
                                        "Are you sure you want to delete this Azure row?"
                                      )
                                    ) {
                                      if (
                                        rowEdit !== "Yes" &&
                                        row.isAutoGenerated
                                      ) {
                                        // Re-initialize rows, but only update Invoice Date for remaining rows
                                        setRows((prevRows) => {
                                          // Remove the row
                                          const filtered = prevRows.filter(
                                            (r) => r.id !== row.id
                                          );
                                          // Get current date and first due date
                                          const currentDate = new Date();
                                          const firstDueDate = new Date(
                                            currentDate.getFullYear(),
                                            currentDate.getMonth() +
                                              (currentDate.getDate() > 3
                                                ? 1
                                                : 0),
                                            3
                                          );
                                          // Update dueDate for each row
                                          return filtered.map((r, idx) => ({
                                            ...r,
                                            id: idx + 1,
                                            dueDate: (() => {
                                              const dueDate = new Date(
                                                firstDueDate
                                              );
                                              dueDate.setMonth(
                                                dueDate.getMonth() + idx
                                              );
                                              return dueDate.toLocaleDateString(
                                                "en-CA"
                                              );
                                            })(),
                                          }));
                                        });
                                      } else {
                                        // Default behavior for rowEdit === "Yes"
                                        setRows((prevRows) => {
                                          const filtered = prevRows.filter(
                                            (r) => r.id !== row.id
                                          );
                                          return filtered.map((r, idx) => ({
                                            ...r,
                                            id: idx + 1,
                                          }));
                                        });
                                      }
                                    }
                                  }}
                                  disabled={rows.length === 1}
                                >
                                  {/* Delete */}
                                  <FontAwesomeIcon icon={faTrash} />
                                </button>
                              )}
                              {row.invoiceStatus === "Started" &&
                                selectedRow.employeeEmail ===
                                  currentUserEmail &&
                                !pendingStatuses.includes(approverStatus) && (
                                  <button
                                    className="btn btn-primary me-2"
                                    // style={{ marginLeft: "10px" }}
                                    onClick={(e) =>
                                      handleUpdateAzureRow(e, row)
                                    }
                                  >
                                    Proceed
                                  </button>
                                )}
                              {rowEdit === "Yes" &&
                                !row.isAutoGenerated &&
                                rowsWithHistory[row.id] && (
                                  <button
                                    className="btn btn-secondary me-2"
                                    onClick={(e) => handleHistoryClick(e, row)}
                                    type="button"
                                  >
                                    {/* History */}
                                    <FontAwesomeIcon
                                      icon={faClockRotateLeft}
                                      title="Invoice History"
                                    />
                                  </button>
                                )}
                            </td>
                          </tr>

                          <tr>
                            <td colSpan={6}>
                              <Collapse in={row.isOpen}>
                                <div>
                                  {row.popupRows.length > 0 && (
                                    <div className="d-flex justify-content-between align-items-center mb-2">
                                      <h5>Additional Rows</h5>
                                      {rowEdit === "Yes" &&
                                        row.isAutoGenerated && (
                                          <button
                                            className="btn btn-secondary btn-sm"
                                            onClick={(e) =>
                                              handleAddPopupRow(e, row.id)
                                            }
                                          >
                                            {/* Add Row */}
                                            <FontAwesomeIcon icon={faPlus} />
                                          </button>
                                        )}
                                    </div>
                                  )}
                                  {row.popupRows.length > 0 && (
                                    <table className="table table-bordered">
                                      <thead>
                                        <tr>
                                          <th>S No</th>
                                          <th
                                            colSpan={rowEdit === "Yes" ? 2 : 1}
                                          >
                                            Type
                                            <span style={{ color: "red" }}>
                                              *
                                            </span>
                                          </th>
                                          <th>
                                            Upload File
                                            <span style={{ color: "red" }}>
                                              *
                                            </span>
                                          </th>
                                          <th>
                                            Invoice Value
                                            <span style={{ color: "red" }}>
                                              *
                                            </span>
                                          </th>
                                          <th>Action</th>
                                        </tr>
                                      </thead>

                                      <tbody>
                                        {row.popupRows.map(
                                          (popupRow, index) => (
                                            <tr key={popupRow.id}>
                                              <td>{popupRow.id}</td>
                                              <td
                                                colSpan={
                                                  rowEdit === "Yes" ? 2 : 1
                                                }
                                              >
                                                <select
                                                  className="form-control"
                                                  value={popupRow.type}
                                                  onChange={(e) =>
                                                    handlePopupRowChange(
                                                      row.id,
                                                      index,
                                                      "type",
                                                      e.target.value
                                                    )
                                                  }
                                                  disabled={
                                                    rowEdit === "Yes" &&
                                                    !row.isAutoGenerated
                                                  }
                                                >
                                                  <option value="">
                                                    Select
                                                  </option>
                                                  {additionalRowsTypes.map(
                                                    (option: string) => (
                                                      <option
                                                        key={option}
                                                        value={option}
                                                      >
                                                        {option}
                                                      </option>
                                                    )
                                                  )}
                                                </select>
                                              </td>

                                              <td>
                                                {rowEdit === "Yes" &&
                                                row.isAutoGenerated ? (
                                                  popupRow.azureFileUrl ? (
                                                    <div
                                                      style={{
                                                        display: "flex",
                                                        alignItems: "center",
                                                        gap: 4,
                                                      }}
                                                    >
                                                      <span
                                                        style={{
                                                          marginRight: 8,
                                                        }}
                                                      >
                                                        {popupRow.azureFileName}
                                                      </span>
                                                      <button
                                                        className="btn btn-outline-primary btn-sm"
                                                        onClick={(e) =>
                                                          handleDownload(
                                                            e,
                                                            popupRow.azureFileUrl!,
                                                            { context }
                                                          )
                                                        }
                                                        type="button"
                                                      >
                                                        <FontAwesomeIcon
                                                          icon={faFileArrowDown}
                                                        />{" "}
                                                      </button>
                                                      <button
                                                        className="btn btn-outline-danger btn-sm"
                                                        onClick={() =>
                                                          handlePopupFileDelete(
                                                            row.id,
                                                            index,
                                                            popupRow.azureFileId
                                                          )
                                                        }
                                                        type="button"
                                                      >
                                                        <FontAwesomeIcon
                                                          icon={faTrash}
                                                        />
                                                      </button>
                                                    </div>
                                                  ) : (
                                                    <div
                                                      style={{
                                                        display: "flex",
                                                        alignItems: "center",
                                                        gap: 4,
                                                      }}
                                                    >
                                                      <input
                                                        type="file"
                                                        className="form-control"
                                                        accept="*"
                                                        onChange={(e) =>
                                                          handlePopupFileChange(
                                                            e,
                                                            row.id,
                                                            index
                                                          )
                                                        }
                                                        value={undefined}
                                                      />
                                                      <button
                                                        className="btn btn-success btn-sm"
                                                        onClick={() =>
                                                          handlePopupFileUpload(
                                                            row.id,
                                                            index
                                                          )
                                                        }
                                                        disabled={
                                                          !popupRowFiles[
                                                            `${row.id}_${index}`
                                                          ]
                                                        }
                                                        type="button"
                                                      >
                                                        <FontAwesomeIcon
                                                          icon={faUpload}
                                                        />
                                                      </button>
                                                    </div>
                                                  )
                                                ) : rowEdit === "Yes" &&
                                                  !row.isAutoGenerated ? (
                                                  popupRow.azureFileUrl ? (
                                                    <button
                                                      className="btn btn-link btn-sm"
                                                      onClick={(e) =>
                                                        handleDownload(
                                                          e,
                                                          popupRow.azureFileUrl!,
                                                          { context }
                                                        )
                                                      }
                                                    >
                                                      {popupRow.azureFileName}
                                                    </button>
                                                  ) : (
                                                    <span>No file</span>
                                                  )
                                                ) : // rowEdit !== "Yes"
                                                popupRow.azureFileUrl ? (
                                                  <div
                                                    style={{
                                                      display: "flex",
                                                      alignItems: "center",
                                                      gap: 4,
                                                    }}
                                                  >
                                                    <span
                                                      style={{ marginRight: 8 }}
                                                    >
                                                      {popupRow.azureFileName}
                                                    </span>
                                                    <button
                                                      className="btn btn-outline-primary btn-sm"
                                                      onClick={(e) =>
                                                        handleDownload(
                                                          e,
                                                          popupRow.azureFileUrl!,
                                                          { context }
                                                        )
                                                      }
                                                      type="button"
                                                    >
                                                      <FontAwesomeIcon
                                                        icon={faFileArrowDown}
                                                      />{" "}
                                                    </button>
                                                    <button
                                                      className="btn btn-outline-danger btn-sm"
                                                      onClick={() =>
                                                        handlePopupFileDelete(
                                                          row.id,
                                                          index,
                                                          popupRow.azureFileId
                                                        )
                                                      }
                                                      type="button"
                                                    >
                                                      <FontAwesomeIcon
                                                        icon={faTrash}
                                                      />
                                                    </button>
                                                  </div>
                                                ) : (
                                                  <div
                                                    style={{
                                                      display: "flex",
                                                      alignItems: "center",
                                                      gap: 4,
                                                    }}
                                                  >
                                                    <input
                                                      type="file"
                                                      className="form-control"
                                                      accept="*"
                                                      onChange={(e) =>
                                                        handlePopupFileChange(
                                                          e,
                                                          row.id,
                                                          index
                                                        )
                                                      }
                                                      value={undefined}
                                                    />
                                                    <button
                                                      className="btn btn-success btn-sm"
                                                      onClick={() =>
                                                        handlePopupFileUpload(
                                                          row.id,
                                                          index
                                                        )
                                                      }
                                                      disabled={
                                                        !popupRowFiles[
                                                          `${row.id}_${index}`
                                                        ]
                                                      }
                                                      type="button"
                                                    >
                                                      <FontAwesomeIcon
                                                        icon={faUpload}
                                                      />
                                                    </button>
                                                  </div>
                                                )}
                                              </td>
                                              <td>
                                                <input
                                                  type="number"
                                                  step="any"
                                                  className="form-control"
                                                  value={popupRow.invoiceValue}
                                                  onChange={(e) => {
                                                    const value =
                                                      e.target.value;
                                                    if (Number(value) < 0)
                                                      return;
                                                    handlePopupRowChange(
                                                      row.id,
                                                      index,
                                                      "invoiceValue",
                                                      e.target.value
                                                    );
                                                  }}
                                                  disabled={
                                                    rowEdit === "Yes" &&
                                                    !row.isAutoGenerated
                                                  }
                                                  min={1}
                                                  pattern="^\\d*\\.?\\d*$"
                                                />
                                              </td>
                                              <td>
                                                <td>
                                                  <button
                                                    className="btn btn-danger btn-sm"
                                                    onClick={(e) => {
                                                      e.preventDefault();
                                                      handleDeletePopupRow(
                                                        row.id,
                                                        index
                                                      );
                                                    }}
                                                    disabled={
                                                      row.popupRows.length ===
                                                        1 && index === 0
                                                    }
                                                  >
                                                    <FontAwesomeIcon
                                                      icon={faTrash}
                                                    />
                                                  </button>
                                                </td>
                                              </td>
                                            </tr>
                                          )
                                        )}
                                        <tr>
                                          <td colSpan={6} className="text-end">
                                            <strong>
                                              Total Invoice Value: ₹
                                              {getInvoiceTotal(row.popupRows)}
                                            </strong>
                                          </td>
                                        </tr>
                                      </tbody>
                                    </table>
                                  )}
                                  {/* Charges Details Section - always shown when Additional Rows are expanded */}
                                  {/* {row.isOpen && ( */}
                                  {row.isOpen && (
                                    <>
                                      {row.chargeRows.length > 0 && (
                                        <h5>Charges Details</h5>
                                      )}
                                      {row.chargeRows.length > 0 && (
                                        <table className="table table-bordered">
                                          <thead>
                                            <tr>
                                              <th>S No</th>
                                              <th>
                                                Are additional charges required?
                                              </th>
                                              <th>Charges Type</th>
                                              <th>Percentage (%)</th>
                                              <th>Value (₹)</th>
                                              <th
                                                colSpan={
                                                  rowEdit === "Yes" ? 2 : 1
                                                }
                                              >
                                                Additional Type
                                              </th>
                                              <th>Add On Value</th>
                                              <th>Total Charges</th>
                                            </tr>
                                          </thead>

                                          <tbody>
                                            {(row.chargeRows &&
                                            row.chargeRows.length > 0
                                              ? row.chargeRows
                                              : []
                                            ).map(
                                              (
                                                chargeRow: ChargeRow,
                                                idx: number
                                              ) => {
                                                const isChecked =
                                                  rowEdit === "Yes" &&
                                                  !row.isAutoGenerated
                                                    ? chargeRow.additionalChargesRequired ===
                                                      "Yes"
                                                    : additionalChargesChecked[
                                                        `${row.id}_${chargeRow.id}`
                                                      ] || false;
                                                return (
                                                  <tr key={chargeRow.id}>
                                                    <td>{chargeRow.id}</td>
                                                    <td>
                                                      <input
                                                        type="checkbox"
                                                        id={`charge-checkbox-${idx}`}
                                                        checked={isChecked}
                                                        disabled={
                                                          rowEdit === "Yes" &&
                                                          !row.isAutoGenerated
                                                        }
                                                        onChange={(e) =>
                                                          handleAdditionalChargesCheckbox(
                                                            row.id,
                                                            chargeRow.id,
                                                            e.target.checked
                                                          )
                                                        }
                                                      />
                                                    </td>
                                                    <td>
                                                      <select
                                                        className="form-control"
                                                        value={
                                                          chargeRow.chargesType
                                                        }
                                                        disabled
                                                      >
                                                        <option value="Discount">
                                                          Discount
                                                        </option>
                                                        <option value="Support">
                                                          Support
                                                        </option>
                                                      </select>
                                                    </td>
                                                    <td>
                                                      <input
                                                        type="number"
                                                        className="form-control"
                                                        value={
                                                          chargeRow.percentage
                                                        }
                                                        disabled
                                                        onChange={(e) =>
                                                          handleChargeRowChange(
                                                            row.id,
                                                            chargeRow.id,
                                                            "percentage",
                                                            e.target.value
                                                          )
                                                        }
                                                      />
                                                    </td>
                                                    <td>
                                                      <input
                                                        type="number"
                                                        className="form-control"
                                                        value={chargeRow.value}
                                                        disabled
                                                        onChange={(e) =>
                                                          handleChargeRowChange(
                                                            row.id,
                                                            chargeRow.id,
                                                            "value",
                                                            e.target.value
                                                          )
                                                        }
                                                      />
                                                    </td>
                                                    <td
                                                      colSpan={
                                                        rowEdit === "Yes"
                                                          ? 2
                                                          : 1
                                                      }
                                                    >
                                                      <select
                                                        id={`charge-select-${idx}`}
                                                        className="form-control"
                                                        value={
                                                          chargeRow.additionalType
                                                        }
                                                        title={
                                                          chargeRow.additionalType
                                                            ? chargeRow.additionalType
                                                            : "--select--"
                                                        } // <-- Add this line
                                                        // title="hjhj" // <-- Add this line
                                                        disabled={
                                                          !isChecked ||
                                                          (rowEdit === "Yes" &&
                                                            !row.isAutoGenerated)
                                                        }
                                                        onChange={(e) => {
                                                          const newType =
                                                            e.target.value;
                                                          // If changing to Percentage and addOnValue > 100, reset addOnValue and alert
                                                          if (
                                                            newType ===
                                                              "Percentage" &&
                                                            (chargeRow.addOnValue ??
                                                              0) > 100
                                                          ) {
                                                            handleChargeRowChange(
                                                              row.id,
                                                              chargeRow.id,
                                                              "addOnValue",
                                                              0
                                                            );
                                                          }
                                                          handleChargeRowChange(
                                                            row.id,
                                                            chargeRow.id,
                                                            "additionalType",
                                                            newType
                                                          );
                                                        }}
                                                      >
                                                        <option value="">
                                                          --select--
                                                        </option>
                                                        <option value="Percentage">
                                                          Percentage
                                                        </option>
                                                        <option value="Value">
                                                          Value
                                                        </option>
                                                      </select>
                                                    </td>
                                                    <td>
                                                      <input
                                                        id={`charge-addon-${idx}`}
                                                        type="number"
                                                        className="form-control"
                                                        value={
                                                          chargeRow.addOnValue ??
                                                          ""
                                                        }
                                                        disabled={
                                                          !isChecked ||
                                                          (rowEdit === "Yes" &&
                                                            !row.isAutoGenerated)
                                                        }
                                                        // ...existing code...
                                                        onChange={(e) => {
                                                          let val = Number(
                                                            e.target.value
                                                          );

                                                          if (
                                                            chargeRow.additionalType ===
                                                            "Percentage"
                                                          ) {
                                                            if (
                                                              !chargeRow.percentage ||
                                                              Number(
                                                                chargeRow.percentage
                                                              ) === 0
                                                            ) {
                                                              if (
                                                                val < 0 ||
                                                                val > 100
                                                              ) {
                                                                alert(
                                                                  "Add On Value can't be greater than 100 and negative when Percentage is blank or 0"
                                                                );
                                                                val = 0;
                                                              }
                                                            } else {
                                                              if (
                                                                val <
                                                                  -Number(
                                                                    chargeRow.percentage
                                                                  ) ||
                                                                val > 100
                                                              ) {
                                                                alert(
                                                                  `Add On Value must be between ${-Number(
                                                                    chargeRow.percentage
                                                                  )} and 100`
                                                                );
                                                                val = 0;
                                                              }
                                                            }
                                                          }

                                                          if (
                                                            chargeRow.additionalType ===
                                                            "Value"
                                                          ) {
                                                            if (
                                                              !chargeRow.value ||
                                                              Number(
                                                                chargeRow.value
                                                              ) === 0
                                                            ) {
                                                              if (val < 0) {
                                                                alert(
                                                                  "Add On Value can't be negative when Value is blank or 0"
                                                                );
                                                                val = 0;
                                                              }
                                                            } else {
                                                              if (
                                                                val <
                                                                -Number(
                                                                  chargeRow.value
                                                                )
                                                              ) {
                                                                alert(
                                                                  `Add On Value can't be smaller than ${-Number(
                                                                    chargeRow.value
                                                                  )}`
                                                                );
                                                                val = 0;
                                                              }
                                                            }
                                                          }

                                                          handleChargeRowChange(
                                                            row.id,
                                                            chargeRow.id,
                                                            "addOnValue",
                                                            val
                                                          );
                                                        }}
                                                      />
                                                    </td>
                                                    <td>
                                                      <input
                                                        type="number"
                                                        className="form-control"
                                                        value={
                                                          chargeRow.totalChargesvalue
                                                        }
                                                        disabled
                                                      />
                                                    </td>
                                                  </tr>
                                                );
                                              }
                                            )}
                                          </tbody>
                                        </table>
                                      )}
                                      <div>
                                        <strong>
                                          Total Invoice Amount: ₹
                                          {rowEdit === "Yes" &&
                                          !row.isAutoGenerated
                                            ? row.totalInvoiceAmount || "0.00"
                                            : getTotalInvoiceAmount(
                                                row.popupRows,
                                                row.chargeRows
                                              )}
                                        </strong>
                                      </div>
                                    </>
                                  )}
                                </div>
                              </Collapse>
                            </td>
                          </tr>
                        </React.Fragment>
                      )
                    )
                  )}
              </tbody>
            </table>
          </div>
        </div>
        <Modal
          show={showHistoryModal}
          onHide={() => setShowHistoryModal(false)}
          centered
          size="lg"
        >
          <Modal.Header closeButton>
            <Modal.Title>Invoice Payment History</Modal.Title>
          </Modal.Header>
          <Modal.Body>
            {historyLoading ? (
              <div className="text-center">Loading...</div>
            ) : invoiceHistoryData.length > 0 ? (
              <div className="table-responsive">
                <table className="table table-bordered">
                  <thead className="table-light">
                    <tr>
                      <th>S.no</th>
                      <th>Invoice Tax Amount</th>
                      <th>Payment Date</th>
                      <th>Payment Amount</th>
                      <th>Pending Amount</th>
                      <th>Remarks</th>
                      <th>Financer Name</th>
                    </tr>
                  </thead>
                  <tbody>
                    {invoiceHistoryData.map((item, index) => (
                      <tr key={item.Id}>
                        <td>{index + 1}</td>
                        <td>{item.InvoiceTaxAmount}</td>
                        <td>
                          {item.PaymentDate
                            ? moment(item.PaymentDate).format("DD-MM-YYYY")
                            : ""}
                        </td>
                        <td>{item.PaymentAmount}</td>
                        <td>{item.PendingAmount}</td>
                        <td>{item.Comment}</td>
                        <td>{item.FinancerName || ""}</td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            ) : (
              <div className="text-center text-danger fw-bold">
                No payment received on this invoice.
              </div>
            )}
          </Modal.Body>
          <Modal.Footer>
            <Button variant="danger" onClick={() => setShowHistoryModal(false)}>
              Close
            </Button>
          </Modal.Footer>
        </Modal>
      </div>
    </div>
  );
}
